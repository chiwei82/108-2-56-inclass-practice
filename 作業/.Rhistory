output= character()
for (x in 1:7) {
for(y in 1:9){
if( seatingChart[[x]][[y]] ==0)
count++
output[[count]] = names(seatingChart[[x]][[y]])
}
}
}
list_availableSeats(seatingChart)
list_availableSeats = function(seatingChart){
count =0
output= character()
for (x in 1:7) {
for(y in 1:9){
if( seatingChart[[x]][[y]] ==0)
count = count+1
output[[count]] = names(seatingChart[[x]][[y]])
}
}
}
list_availableSeats(seatingChart)
list_availableSeats = function(seatingChart){
count =0
output= character()
for (x in 1:7) {
for(y in 1:9){
if( seatingChart[[x]][[y]] ==0)
count = count+1
output[count] = names(seatingChart[[x]][[y]])
}
}
}
list_availableSeats(seatingChart)
names(seatingChart)[[1]][[1]]
names(seatingChart)[[1]][[1]]
names(seatingChart[[1]][[1]])
names(seatingChart[[1]])
list_availableSeats = function(seatingChart){
count =0
output= character()
for (x in 1:7) {
for(y in 1:9){
if( seatingChart[[x]][[y]] ==0)
count = count+1
output[count] = paste0(names(seatingChart)[[x]][[y]],"-",names(seatingChart[[x]])[[y]])
}
}
}
list_availableSeats(seatingChart)
names(seatingChart)
list_availableSeats = function(seatingChart){
count =0
output= character()
for (x in 1:7) {
for(y in 1:9){
if( seatingChart[[x]][[y]] ==0)
count = count+1
output[count] = paste0(names(seatingChart)[[x]],"-",names(seatingChart[[x]])[[y]])
}
}
}
list_availableSeats(seatingChart)
list_availableSeats(seatingChart)
list_availableSeats = function(seatingChart){
count =0
output= character()
for (x in 1:7) {
for(y in 1:9){
if( seatingChart[[x]][[y]] ==0){
count = count+1
output[count] = paste0(names(seatingChart)[[x]],"-",names(seatingChart[[x]])[[y]])
}
}
}
return(output)
}
list_availableSeats(seatingChart)
update_seatingChart = function(seatingChart, selectedSeat){
# 識別預選的座位
number_of_row = str_extract(selectedSeat,"(?<=row)[:digit:]{1}") %>% as.integer() #取出selected seat 的 第幾row
number_of_minus = str_extract(selectedSeat,"[:digit:]{1}$")  # 取出selected seat -幾
# 指向座位表
temp <- seatingChart
pick = number_of_minus == names(temp[[number_of_row]])
temp[[number_of_row]][pick] -> zero_or_one
# 改值或是顯示錯誤
if (zero_or_one == 0)
{
temp[[number_of_row]][pick] = -1
return(temp)
} else {
warning("很抱歉您所選的位置已無法選")
return(temp)
}
}
update_seatingChart(seatingChart, "row1-3")
update_seatingChart(seatingChart, "row1-5")
update_seatingChart(seatingChart, "row7-5")
update_seatingChart(seatingChart, "row7-7")
assign_seats = function(people, seatingChart){
seatingChart %>% unlist() %>% str_count(.,"0") %>% sum() -> empty_size
length(people) -> people_size
if (people_size < empty_size){
sample_size = people_size
} else {
sample_size = empty_size
}
list_availableSeats(seatingChart) -> seat_available
sample(seat_available ,sample_size) -> output
names(output) <- sample(people,sample_size)
return(output)
}
assign_seats
assign_seats(animal_friends,seatingChart)
which(seatingChart[[1]][[1]])
number_of_row = str_extract(selectedSeat,"(?<=row)[:digit:]{1}") %>% as.integer()
number_of_minus = str_extract(selectedSeat,"[:digit:]{1}$")
pick = number_of_minus == names(seatingChart[[number_of_row]])
seatingChart[[number_of_row]][pick]
which(seatingChart[[number_of_row]][pick])
selectedSeat = "row 7-5"
number_of_row = str_extract(selectedSeat,"(?<=row)[:digit:]{1}") %>% as.integer()
number_of_minus = str_extract(selectedSeat,"[:digit:]{1}$")
pick = number_of_minus == names(seatingChart[[number_of_row]])
seatingChart[[number_of_row]][pick]
which(seatingChart[[number_of_row]][pick])
number_of_row = str_extract(selectedSeat,"(?<=row)[:digit:]{1}") %>% as.integer()
number_of_minus = str_extract(selectedSeat,"[:digit:]{1}$")
number_of_minus
number_of_row
selectedSeat = "row7-5"
number_of_row = str_extract(selectedSeat,"(?<=row)[:digit:]{1}") %>% as.integer()
number_of_row
pick = number_of_minus == names(seatingChart[[number_of_row]])
seatingChart[[number_of_row]][pick]
seatingChart[[number_of_row]][pick]
which(seatingChart[[number_of_row]][pick])
which(pick)
which(pick)
which(pick) -> selected_location
rm(selectedSeat)
remove_seats_covid19 = function(seatingChart , selectedSeat) {
number_of_row = str_extract(selectedSeat,"(?<=row)[:digit:]{1}") %>% as.integer()
number_of_minus = str_extract(selectedSeat,"[:digit:]{1}$")
pick = number_of_minus == names(seatingChart[[number_of_row]])
seatingChart[[number_of_row]][pick]
which(pick) -> selected_location
if (selected_location > 1 & selected_location <9 ){
seatingChart[[number_of_row]][selected_location+1] =-1
seatingChart[[number_of_row]][selected_location-1] =-1
} else if (selected_location == 9 ){
seatingChart[[number_of_row]][selected_location-1] =-1
} else {
seatingChart[[number_of_row]][selected_location+1] =-1
}
return(seatingChart)
}
remove_seats_covid19(seatingChart,"row7-2")
remove_seats_covid19 = function(seatingChart , selectedSeat) {
number_of_row = str_extract(selectedSeat,"(?<=row)[:digit:]{1}") %>% as.integer()
number_of_minus = str_extract(selectedSeat,"[:digit:]{1}$")
pick = number_of_minus == names(seatingChart[[number_of_row]])
seatingChart[[number_of_row]][pick] = -1
which(pick) -> selected_location
if (selected_location > 1 & selected_location <9 ){
seatingChart[[number_of_row]][selected_location+1] =-1
seatingChart[[number_of_row]][selected_location-1] =-1
} else if (selected_location == 9 ){
seatingChart[[number_of_row]][selected_location-1] =-1
} else {
seatingChart[[number_of_row]][selected_location+1] =-1
}
return(seatingChart)
}
remove_seats_covid19(seatingChart,"row7-2")
remove_seats_covid19(seatingChart,"row7-3")
remove_seats_covid19(seatingChart,"row7-6")
remove_seats_covid19(seatingChart,"row7-7")
# Chunk 1: setup
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate); library(jsonlite)
# Chunk 2: data1
fromJSON("https://data.ntpc.gov.tw/api/datasets/C3FFC733-C2E3-42C6-9C14-CDDDDF3D2AEC/json/preview") -> ntpc_building_info
# Chunk 3: ans11
name = map(1:30,~ntpc_building_info[[3]][[.x]]) %>% unlist()
pick = str_detect( name , "停車場")
a = map(1:4, ~{ntpc_building_info[[.x]][pick]})
y = 1:length(ntpc_building_info[[3]][pick])
y = as.character(y)
output = data.frame(row.names = y)
for (x in 1:4 ){ output[[x]] = a [[x]]}
names(output) = names(ntpc_building_info)
ntpc_building_parking = output
ntpc_building_parking
# Chunk 4: ans12
all_reference = map(1:4,~ntpc_building_info[[.x]]) %>% unlist() %>% unique()
no_found = function(key_ward){
if( sum(str_detect(all_reference, key_ward ))!=0 )  {
} else {
warning("No Found")
}
}
no_found
# Chunk 5: ans13
all_reference = map(1:4,~ntpc_building_info[[.x]]) %>% unlist() %>% unique()
search_engine = function(key_ward){
if( sum(str_detect(all_reference, key_ward ))!=0 ) {
pick_length = 1: (map(1:4,~str_detect(ntpc_building_info[[.x]],key_ward)) %>% unlist() %>% sum())
for (y in 1:4) {
if ( sum(str_detect(ntpc_building_info[[y]],key_ward))!=0 )
{
pick = str_detect(ntpc_building_info[[y]], key_ward )
}
}
output = data.frame(row.names = as.character(pick_length))
a = map(1:4, ~{ntpc_building_info[[.x]][pick]})
for (z in 1:4 ){
output[[z]] = a[[z]]
}
names(output) = names(ntpc_building_info)
print(output)
} else {
warning("No Found")
}
}
search_engine
# Chunk 6: data2
read_csv("https://www.dropbox.com/s/8mlf6cory32q1eq/bear.csv?dl=1") ->
bear
# Chunk 7: ans2
best_choice = function(choice){
max_utility = max(bear[[3]])
if ( choice[[3]]  < max_utility ){
if(choice[[1]] > choice[[2]])
{
return("少消費蛋糕、多消費甜甜圈")
}else{
return("多消費蛋糕、少消費甜甜圈")
}
} else {
return("維持現有消費組合")
}
}
best_choice
# Chunk 8: data3
browseURL("https://docs.google.com/spreadsheets/d/1bdb4XPEwrQByujQ79PeQ5D0V_157ouRrRVDiA9cs3B0/edit#gid=0")
# Chunk 9: ans31
output = map(1:7,~.x)
names(output) = map(1:7, ~paste0("row", .x))
elements = c(0,0,-1,0,0,0,0,-1,0) %>% as.integer()
names(elements) = c("7","5","A1","3","1","2","4","A2","6")
for (x in 1:7) {
output[[x]] = elements
}
output -> seatingChart
seatingChart
# Chunk 10: ans32
list_availableSeats = function(seatingChart){
count =0
output= character()
for (x in 1:7) {
for(y in 1:9){
if( seatingChart[[x]][[y]] ==0){
count = count+1
output[count] = paste0(names(seatingChart)[[x]],"-",names(seatingChart[[x]])[[y]])
}
}
}
return(output)
}
list_availableSeats
# Chunk 11: ans33
update_seatingChart = function(seatingChart, selectedSeat){
# 識別預選的座位
number_of_row = str_extract(selectedSeat,"(?<=row)[:digit:]{1}") %>% as.integer() #取出selected seat 的 第幾row
number_of_minus = str_extract(selectedSeat,"[:digit:]{1}$")  # 取出selected seat -幾
# 指向座位表
temp <- seatingChart
pick = number_of_minus == names(temp[[number_of_row]])
temp[[number_of_row]][pick] -> zero_or_one
# 改值或是顯示錯誤
if (zero_or_one == 0)
{
temp[[number_of_row]][pick] = -1
return(temp)
} else {
warning("很抱歉您所選的位置已無法選")
return(temp)
}
}
update_seatingChart
# Chunk 12: data34
jsonlite::fromJSON("https://www.dropbox.com/s/eb4xcfp97ro7m3y/animal_names.json?dl=1") -> animal_friends
animal15 <- animal_friends[1:15]
# Chunk 13: ans34
assign_seats = function(people, seatingChart){
seatingChart %>% unlist() %>% str_count(.,"0") %>% sum() -> empty_size
length(people) -> people_size
if (people_size < empty_size){
sample_size = people_size
} else {
sample_size = empty_size
}
list_availableSeats(seatingChart) -> seat_available
sample(seat_available ,sample_size) -> output
names(output) <- sample(people,sample_size)
return(output)
}
assign_seats
# Chunk 14: ans35
remove_seats_covid19 = function(seatingChart , selectedSeat) {
number_of_row = str_extract(selectedSeat,"(?<=row)[:digit:]{1}") %>% as.integer()
number_of_minus = str_extract(selectedSeat,"[:digit:]{1}$")
pick = number_of_minus == names(seatingChart[[number_of_row]])
seatingChart[[number_of_row]][pick] = -1
which(pick) -> selected_location
if (selected_location > 1 & selected_location <9 ){
seatingChart[[number_of_row]][selected_location+1] =-1
seatingChart[[number_of_row]][selected_location-1] =-1
} else if (selected_location == 9 ){
seatingChart[[number_of_row]][selected_location-1] =-1
} else {
seatingChart[[number_of_row]][selected_location+1] =-1
}
return(seatingChart)
}
remove_seats_covid19
# Chunk 15: ans36
# assign_seats_covid19
ntpc_building_parking
no_found("停車場")
no_found("幹你娘")
search_engine("車")
search_engine("空")
search_engine("服務")
search_engine("車廠")
search_engine("車")
search_engine("公共")
search_engine("共空間")
map(1:11,~best_choice(bear[.x,]))
map(1:12,~best_choice(bear[.x,]))
map(1:10,~best_choice(bear[.x,]))
map(6,~best_choice(bear[.x,]))
seatingChart
seatingChart
list_availableSeats(seatingChart)
update_seatingChart(seatingChart,"row7-7")
update_seatingChart(seatingChart,"row7-5")
update_seatingChart(seatingChart,"row7-1")
assign(animal15)
assign(animal15,seatingChart)
assign_seats(animal15, seatingChart)
# Chunk 1: setup
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate); library(jsonlite)
# Chunk 2: data1
fromJSON("https://data.ntpc.gov.tw/api/datasets/C3FFC733-C2E3-42C6-9C14-CDDDDF3D2AEC/json/preview") -> ntpc_building_info
# Chunk 3: ans11
name = map(1:30,~ntpc_building_info[[3]][[.x]]) %>% unlist()
pick = str_detect( name , "停車場")
a = map(1:4, ~{ntpc_building_info[[.x]][pick]})
y = 1:length(ntpc_building_info[[3]][pick])
y = as.character(y)
output = data.frame(row.names = y)
for (x in 1:4 ){ output[[x]] = a [[x]]}
names(output) = names(ntpc_building_info)
ntpc_building_parking = output
ntpc_building_parking
# Chunk 4: ans12
all_reference = map(1:4,~ntpc_building_info[[.x]]) %>% unlist() %>% unique()
no_found = function(key_ward){
if( sum(str_detect(all_reference, key_ward ))!=0 )  {
} else {
warning("No Found")
}
}
no_found
# Chunk 5: ans13
all_reference = map(1:4,~ntpc_building_info[[.x]]) %>% unlist() %>% unique()
search_engine = function(key_ward){
if( sum(str_detect(all_reference, key_ward ))!=0 ) {
pick_length = 1: (map(1:4,~str_detect(ntpc_building_info[[.x]],key_ward)) %>% unlist() %>% sum())
for (y in 1:4) {
if ( sum(str_detect(ntpc_building_info[[y]],key_ward))!=0 )
{
pick = str_detect(ntpc_building_info[[y]], key_ward )
}
}
output = data.frame(row.names = as.character(pick_length))
a = map(1:4, ~{ntpc_building_info[[.x]][pick]})
for (z in 1:4 ){
output[[z]] = a[[z]]
}
names(output) = names(ntpc_building_info)
print(output)
} else {
warning("No Found")
}
}
search_engine
# Chunk 6: data2
read_csv("https://www.dropbox.com/s/8mlf6cory32q1eq/bear.csv?dl=1") ->
bear
# Chunk 7: ans2
best_choice = function(choice){
max_utility = max(bear[[3]])
if ( choice[[3]]  < max_utility ){
if(choice[[1]] > choice[[2]])
{
return("少消費蛋糕、多消費甜甜圈")
}else{
return("多消費蛋糕、少消費甜甜圈")
}
} else {
return("維持現有消費組合")
}
}
best_choice
# Chunk 8: data3
browseURL("https://docs.google.com/spreadsheets/d/1bdb4XPEwrQByujQ79PeQ5D0V_157ouRrRVDiA9cs3B0/edit#gid=0")
# Chunk 9: ans31
output = map(1:7,~.x)
names(output) = map(1:7, ~paste0("row", .x))
elements = c(0,0,-1,0,0,0,0,-1,0) %>% as.integer()
names(elements) = c("7","5","A1","3","1","2","4","A2","6")
for (x in 1:7) {
output[[x]] = elements
}
output -> seatingChart
seatingChart
# Chunk 10: ans32
list_availableSeats = function(seatingChart){
count =0
output= character()
for (x in 1:7) {
for(y in 1:9){
if( seatingChart[[x]][[y]] ==0){
count = count+1
output[count] = paste0(names(seatingChart)[[x]],"-",names(seatingChart[[x]])[[y]])
}
}
}
return(output)
}
list_availableSeats
# Chunk 11: ans33
update_seatingChart = function(seatingChart, selectedSeat){
# 識別預選的座位
number_of_row = str_extract(selectedSeat,"(?<=row)[:digit:]{1}") %>% as.integer() #取出selected seat 的 第幾row
number_of_minus = str_extract(selectedSeat,"[:digit:]{1}$")  # 取出selected seat -幾
# 指向座位表
temp <- seatingChart
pick = number_of_minus == names(temp[[number_of_row]])
temp[[number_of_row]][pick] -> zero_or_one
# 改值或是顯示錯誤
if (zero_or_one == 0)
{
temp[[number_of_row]][pick] = -1
return(temp)
} else {
warning("很抱歉您所選的位置已無法選")
return(temp)
}
}
update_seatingChart
# Chunk 12: data34
jsonlite::fromJSON("https://www.dropbox.com/s/eb4xcfp97ro7m3y/animal_names.json?dl=1") -> animal_friends
animal15 <- animal_friends[1:15]
# Chunk 13: ans34
assign_seats = function(people, seatingChart){
seatingChart %>% unlist() %>% str_count(.,"0") %>% sum() -> empty_size
length(people) -> people_size
if (people_size < empty_size){
sample_size = people_size
} else {
sample_size = empty_size
}
list_availableSeats(seatingChart) -> seat_available
sample(seat_available ,sample_size) -> output
names(output) <- sample(people,sample_size)
return(output)
}
assign_seats
# Chunk 14: ans35
remove_seats_covid19 = function(seatingChart , selectedSeat) {
number_of_row = str_extract(selectedSeat,"(?<=row)[:digit:]{1}") %>% as.integer()
number_of_minus = str_extract(selectedSeat,"[:digit:]{1}$")
pick = number_of_minus == names(seatingChart[[number_of_row]])
seatingChart[[number_of_row]][pick] = -1
which(pick) -> selected_location
if (selected_location > 1 & selected_location <9 ){
seatingChart[[number_of_row]][selected_location+1] =-1
seatingChart[[number_of_row]][selected_location-1] =-1
} else if (selected_location == 9 ){
seatingChart[[number_of_row]][selected_location-1] =-1
} else {
seatingChart[[number_of_row]][selected_location+1] =-1
}
return(seatingChart)
}
remove_seats_covid19
# Chunk 15: ans36
# assign_seats_covid19
assign_seats(animal15, seatingChart)
assign_seats(animal_friends, seatingChart)
remove_seats_covid19(seatingChart,"row7-1")
remove_seats_covid19(seatingChart,"row7-3")
remove_seats_covid19(seatingChart,"row7-7")
remove_seats_covid19(seatingChart,"row7-5")
remove_seats_covid19(seatingChart,"row7-4")
View(assign_seats)
