knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
surface_A = 15*10*4+20*10*2
surface_A = 15*10*4+20*10*2
surface_A
surface_A = 15*10*4+20*10*2
surface_A
surface_cube = function(long,width,high){
surface = long*width*2+width*high*4
return(surface)
}
surface_cube
surface_cube(20,10,15)
read_csv("https://www.dropbox.com/s/9xzccsvwrnctzul/mask.csv?dl=1") -> Mask
str(Mask)
Mask
Mask[[1]]
Mask[[1]][[1]]
str_extract(Mask[[1]][[1]],"[:digit:]{1}$")
str_extract(Mask[[1]],"[:digit:]{1}$")
str_extract(Mask[[1]][[1]],"[:digit:]{1}$")
# `1st_odd_or_even`
if(str_extract(Mask[[1]][[1]],"[:digit:]{1}$")%%2 == 0)
{
return("雙號")
}else{
return("單號")
}
# `1st_odd_or_even`
if(as.integer(str_extract(Mask[[1]][[1]],"[:digit:]{1}$"))%%2 == 0)
{
return("雙號")
}else{
return("單號")
}
# `1st_odd_or_even`
if(as.integer(str_extract(Mask[[1]][[1]],"[:digit:]{1}$"))%%2 == 0)
{
print("雙號")
}else{
print("單號")
}
# `1st_odd_or_even`
str_extract(Mask[[1]][[1]],"[:digit:]{1}$")
if(as.integer(str_extract(Mask[[1]][[1]],"[:digit:]{1}$"))%%2 == 0)
{
`1st_odd_or_even` = 0
}else{
`1st_odd_or_even` = 1
}
`1st_odd_or_even`
if(as.integer(str_extract(Mask[[1]][[1]],"[:digit:]{1}$"))%%2 == 0)
{
`1st_odd_or_even` = 0
}else{
`1st_odd_or_even` = 1
}
`1st_odd_or_even`
odd_or_even = function(ID){
if(as.integer(str_extract(ID,"[:digit:]{1}$"))%%2 == 0)
{
odd_or_even = 0
}else{
odd_or_even = 1
}
}
odd_or_even
odd_or_even(Mask$身分證字號[[1]])
N12264430.
odd_or_even(Mask$身分證字號[[1]])\
odd_or_even(Mask$身分證字號[[1]])
N1266314430
odd_or_even = function(ID){
if(as.integer(str_extract(ID,"[:digit:]{1}$"))%%2 == 0)
{
result = 0
return(result)
}else{
result = 0
return(result)
}
}
odd_or_even
odd_or_even(Mask$身分證字號[[1]])
odd_or_even = function(ID){
if(as.integer(str_extract(ID,"[:digit:]{1}$"))%%2 == 0)
{
result = 0
return(result)
}else{
result = 1
return(result)
}
}
odd_or_even
odd_or_even(Mask$身分證字號[[1]])
odd_or_even(Mask$身分證字號[[2]])
odd_or_even(Mask$身分證字號[[3]])
odd_or_even(Mask$身分證字號)
odd_or_even(Mask$身分證字號[[1]])
map(odd_or_even(Mask$身分證字號),~.x)
map(odd_or_even(Mask$身分證字號),~.x)
odd_or_even = function(ID){
if(as.integer(str_extract(ID,"[:digit:]{1}$"))%%2 == 0)
{
result = 0
return(result)
}else{
result = 1
return(result)
}
}
odd_or_even
odd_or_even(Mask$身分證字號[[1]])
class(`1st_odd_or_even`)
if(as.integer(str_extract(Mask[[1]][[1]],"[:digit:]{1}$"))%%2 == 0)
{
`1st_odd_or_even` = 0L
}else{
`1st_odd_or_even` = 1L
}
`1st_odd_or_even`
class(`1st_odd_or_even`)
length(`1st_odd_or_even`)
if(as.integer(str_extract(Mask[[1]][[1]],"[:digit:]{1}$"))%%2 == 0)
{
`1st_odd_or_even` = 0L
}else{
`1st_odd_or_even` = 1L
}
`1st_odd_or_even`
odd_or_even(Mask$身分證字號[[1]])
odd_or_even = function(ID){
if(as.integer(str_extract(ID,"[:digit:]{1}$"))%%2 == 0)
{
result = 0L
return(result)
}else{
result = 1L
return(result)
}
}
odd_or_even
odd_or_even(Mask$身分證字號[[1]])
data.frame(
weekday = str_c("星期",c("天","一","二","三","四","五","六")),
number = c(1:7)
) -> weekday_chart
data.frame(
weekday = str_c("星期",c("天","一","二","三","四","五","六")),
number = c(1:7)
) -> weekday_chart
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
data.frame(
weekday = str_c("星期",c("天","一","二","三","四","五","六")),
number = c(1:7)
) -> weekday_chart
weekday_chart
chart <- list(
`雙` = c(1,3,5,7),
`單` = c(1,2,4,6)
)
chart[[odd_or_even(Mask$身分證字號[[1]])+1]]
chart <- list(
`雙` = c(1,3,5,7),
`單` = c(1,2,4,6)
)
chart[[odd_or_even(Mask$身分證字號[[1]])+1]]
`wday()`
`today()`
today()
wday()
wday()
wday(today())
chart <- list(
`雙` = c(1,3,5,7),
`單` = c(1,2,4,6)
)
chart[[odd_or_even(Mask$身分證字號[[1]])+1]]
weekday_chart
weekday_chart[chart[[odd_or_even(Mask$身分證字號[[1]])+1]]]
weekday_chart
weekday_chart["number"]
weekday_chart["weekday"]["number" == (chart[[odd_or_even(Mask$身分證字號[[1]])+1]]) ]
weekday_chart
as.list(weekday_chart)
weekday_chart = as.list(weekday_chart)
weekday_chart$weekday[weekday_chart$number == chart[[odd_or_even(Mask$身分證字號[[1]])+1]]]
weekday_chart$weekday[as.integer(weekday_chart$number) == as.intefer(chart[[odd_or_even(Mask$身分證字號[[1])])+1]]]
weekday_chart$weekday[as.integer(weekday_chart$number) == as.intefer(chart[[odd_or_even(Mask$身分證字號[[1]])+1]])]
weekday_chart$weekday[as.integer(weekday_chart$number) == as.integer(chart[[odd_or_even(Mask$身分證字號[[1]])+1]])]
chart <- list(
`雙` = c(1,3,5,7),
`單` = c(1,2,4,6)
)
chart[[odd_or_even(Mask$身分證字號[[1]])+1]]
weekday_chart$weekday
weekday_chart$weekday[as.numeric(weekday_chart$number) == c(1,3,5,7)]
map(weekday_chart$number,~.x)
weekday_chart$number
weekday_chart$number[[1]
213
weekday_chart$number[[1]]
(map(weekday_chart$number,~.x)) ==(chart[[odd_or_even(Mask$身分證字號[[1]])+1]])
map(weekday_chart$number,~.x))
map(weekday_chart$number,~.x)
map(weekday_chart$number,~.x))[1]
map(weekday_chart$number,~.x))[[1]]
map(weekday_chart$number,~.x)[[1]]
map(map(weekday_chart$number,~.x),~.x)
map(weekday_chart$number,~.x)
as.integer(map(weekday_chart$number,~.x))
as.integer(map(weekday_chart$number,~.x)) ==as.integer(chart[[odd_or_even(Mask$身分證字號[[1]])+1]])
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
list(
year1=一年級不重覆科目名稱（class character）,
year2=二年級不重覆科目名稱（class character）,
year3=三年級不重覆科目名稱（class character）,
year4=四年級不重覆科目名稱（class character）
)
courseStructure
str(courseStructure)
courseStructure[[1]]
courseStructure[[1]]
courseStructure[[1]] == 100
str(courseStructure)
paste0("經濟系","1")
get_courses = function(entranceYear, major){
year1 = unique(courseStructure["科目名稱"][courseStructure[[1]] == entranceYear][courseStructure["應修系級"]==paste0(major,1)])
year2 = unique(courseStructure["科目名稱"][courseStructure[[1]] == as.character(as.integer(entranceYear)+1)][courseStructure["應修系級"]==paste0(major,1)])
year3 = unique(courseStructure["科目名稱"][courseStructure[[1]] == as.character(as.integer(entranceYear)+2)][courseStructure["應修系級"]==paste0(major,1)])
year4 = unique(courseStructure["科目名稱"][courseStructure[[1]] == as.character(as.integer(entranceYear)+4)][courseStructure["應修系級"]==paste0(major,1)])
result = list(year1,year2,year3,year4)
return(result)
}
# get_courses
get_courses = function(entranceYear, major){
year1 = unique(courseStructure["科目名稱"][courseStructure[[1]] == entranceYear][courseStructure["應修系級"]==paste0(major,1)])
year2 = unique(courseStructure["科目名稱"][courseStructure[[1]] == as.character(as.integer(entranceYear)+1)][courseStructure["應修系級"]==paste0(major,1)])
year3 = unique(courseStructure["科目名稱"][courseStructure[[1]] == as.character(as.integer(entranceYear)+2)][courseStructure["應修系級"]==paste0(major,1)])
year4 = unique(courseStructure["科目名稱"][courseStructure[[1]] == as.character(as.integer(entranceYear)+4)][courseStructure["應修系級"]==paste0(major,1)])
result = list(year1,year2,year3,year4)
return(result)
}
get_courses
get_courses(100,"經濟")
get_courses("100","經濟")
unique(courseStructure["科目名稱"][courseStructure[[1]] == entranceYear][courseStructure["應修系級"]==paste0(major,1)])
unique(courseStructure["科目名稱"][courseStructure[[1]] == "100" ][courseStructure["應修系級"]=="經濟1"])
unique(courseStructure["科目名稱"] [[courseStructure[[1]] == "100" ]&&[courseStructure["應修系級"]=="經濟1"]])
unique(courseStructure["科目名稱"][[courseStructure[[1]] == "100" ]&&[courseStructure["應修系級"]=="經濟1"]])
unique(courseStructure["科目名稱"][[courseStructure[[1]]=="100"][courseStructure["應修系級"]=="經濟1"]])
unique(courseStructure["科目名稱"][[courseStructure[[1]] == "100" ][courseStructure["應修系級"]=="經濟1"])
unique(courseStructure["科目名稱"][courseStructure[[1]] == "100"][courseStructure["應修系級"]=="經濟1"])
courseStructure["科目名稱"][courseStructure[[1]] == "100"][courseStructure["應修系級"]=="經濟1"]
str(courseStructure)
get_courses = function(entranceYear, major){
entranceYear= as.character(entranceYear)
major = as.character(major)
year1 = unique(courseStructure["科目名稱"][courseStructure$學年 == entranceYear][courseStructure["應修系級"]==paste0(major,1)])
year2 = unique(courseStructure["科目名稱"][courseStructure$學年 == as.character(as.integer(entranceYear)+1)][courseStructure["應修系級"]==paste0(major,1)])
year3 = unique(courseStructure["科目名稱"][courseStructure$學年 == as.character(as.integer(entranceYear)+2)][courseStructure["應修系級"]==paste0(major,1)])
year4 = unique(courseStructure["科目名稱"][courseStructure$學年 == as.character(as.integer(entranceYear)+4)][courseStructure["應修系級"]==paste0(major,1)])
result = list(year1,year2,year3,year4)
return(result)
}
get_courses
get_courses( 100, "經濟系")
get_courses( 100, "經濟系")
str(courseStructure)
get_courses = function(entranceYear, major){
entranceYear= as.character(entranceYear)
major = as.character(major)
year1 = unique(courseStructure["科目名稱"][courseStructure$學年 == entranceYear][paste0(major,1)%in%courseStructure["應修系級"]])
year2 = unique(courseStructure["科目名稱"][courseStructure$學年 == as.character(as.integer(entranceYear)+1)][paste0(major,2)%in%courseStructure["應修系級"]])
year3 = unique(courseStructure["科目名稱"][courseStructure$學年 == as.character(as.integer(entranceYear)+2)][paste0(major,3)%in%courseStructure["應修系級"]])
year4 = unique(courseStructure["科目名稱"][courseStructure$學年 == as.character(as.integer(entranceYear)+4)][paste0(major,4)%in%courseStructure["應修系級"]])
result = list(year1,year2,year3,year4)
return(result)
}
get_courses
get_courses(100,"經濟系")
(courseStructure$學年 == "100" &
str_detect(courseStructure$應修系級, "經濟系1")
) -> pick_courses
(courseStructure$學年 == "100" &
stringr::str_detect(courseStructure$應修系級, "經濟系1")
) -> pick_courses
(courseStructure$學年 == "100" &
stringr::str_detect(courseStructure$應修系級, "經濟系1")
) -> pick_courses
(courseStructure$學年 == "101" &
stringr::str_detect(courseStructure$應修系級, "經濟系2")
) -> pick_courses2
(courseStructure$學年 == "102" &
stringr::str_detect(courseStructure$應修系級, "經濟系3")
) -> pick_courses3
(courseStructure$學年 == "103" &
stringr::str_detect(courseStructure$應修系級, "經濟系4")
) -> pick_courses4
get_courses = function(entranceYear, major){
entranceYear= as.character(entranceYear)
major = as.character(major)
year1 = unique(courseStructure["科目名稱"][pick_courses]
year2 = unique(courseStructure["科目名稱"][pick_courses]
year3 = unique(courseStructure["科目名稱"][pick_courses]
year4 = unique(courseStructure["科目名稱"][pick_courses]
result = list(year1,year2,year3,year4)
return(result)
}
get_courses(100,"經濟系")
(courseStructure$學年 == "100" &
stringr::str_detect(courseStructure$應修系級, "經濟系1")
) -> pick_courses
(courseStructure$學年 == "101" &
stringr::str_detect(courseStructure$應修系級, "經濟系2")
) -> pick_courses2
(courseStructure$學年 == "102" &
stringr::str_detect(courseStructure$應修系級, "經濟系3")
) -> pick_courses3
(courseStructure$學年 == "103" &
stringr::str_detect(courseStructure$應修系級, "經濟系4")
) -> pick_courses4
get_courses = function(entranceYear, major){
entranceYear= as.character(entranceYear)
major = as.character(major)
year1 = unique(courseStructure["科目名稱"][pick_courses]
year2 = unique(courseStructure["科目名稱"][pick_courses2]
year3 = unique(courseStructure["科目名稱"][pick_courses3]
year4 = unique(courseStructure["科目名稱"][pick_courses4]
result = list(year1,year2,year3,year4)
return(result)
}
get_courses(100,"經濟系")
(courseStructure$學年 == "100" &
stringr::str_detect(courseStructure$應修系級, "經濟系1")
) -> pick_courses
(courseStructure$學年 == "101" &
stringr::str_detect(courseStructure$應修系級, "經濟系2")
) -> pick_courses2
(courseStructure$學年 == "102" &
stringr::str_detect(courseStructure$應修系級, "經濟系3")
) -> pick_courses3
(courseStructure$學年 == "103" &
stringr::str_detect(courseStructure$應修系級, "經濟系4")
) -> pick_courses4
get_courses = function(entranceYear, major){
entranceYear= as.character(entranceYear)
major = as.character(major)
year1 = unique(courseStructure["科目名稱"][pick_courses])
year2 = unique(courseStructure["科目名稱"][pick_courses2])
year3 = unique(courseStructure["科目名稱"][pick_courses3])
year4 = unique(courseStructure["科目名稱"][pick_courses4])
result = list(year1,year2,year3,year4)
return(result)
}
get_courses(100,"經濟系")
(courseStructure$學年 == "100" &
stringr::str_detect(courseStructure$應修系級, "經濟系1")
) -> pick_courses
(courseStructure$學年 == "101" &
stringr::str_detect(courseStructure$應修系級, "經濟系2")
) -> pick_courses2
(courseStructure$學年 == "102" &
stringr::str_detect(courseStructure$應修系級, "經濟系3")
) -> pick_courses3
(courseStructure$學年 == "103" &
stringr::str_detect(courseStructure$應修系級, "經濟系4")
) -> pick_courses4
get_courses = function(entranceYear, major){
entranceYear= as.character(entranceYear)
major = as.character(major)
year1 = unique(courseStructure$科目名稱[pick_courses])
year2 = unique(courseStructure$科目名稱[pick_courses2])
year3 = unique(courseStructure$科目名稱[pick_courses3])
year4 = unique(courseStructure$科目名稱[pick_courses4])
result = list(year1,year2,year3,year4)
return(result)
}
get_courses(100,"經濟系")
get_courses = function(entranceYear, major){
entranceYear= as.character(entranceYear)
major = as.character(major)
(courseStructure$學年 == as.character(as.integer(entranceYear)) &
stringr::str_detect(courseStructure$應修系級,paste0(major,1))
) -> pick_courses
(courseStructure$學年 == as.character(as.integer(entranceYear)+1L) &
stringr::str_detect(courseStructure$應修系級, paste0(major,2))
) -> pick_courses2
(courseStructure$學年 == as.character(as.integer(entranceYear)+2L) &
stringr::str_detect(courseStructure$應修系級, paste0(major,3))
) -> pick_courses3
(courseStructure$學年 == as.character(as.integer(entranceYear)+3L) &
stringr::str_detect(courseStructure$應修系級, paste0(major,4))
) -> pick_courses4
year1 = unique(courseStructure$科目名稱[pick_courses])
year2 = unique(courseStructure$科目名稱[pick_courses2])
year3 = unique(courseStructure$科目名稱[pick_courses3])
year4 = unique(courseStructure$科目名稱[pick_courses4])
result = list(year1,year2,year3,year4)
return(result)
}
get_courses(100,"經濟系")
class(year1)
class(unique(courseStructure$科目名稱[pick_courses]))
get_courses = function(entranceYear, major){
entranceYear= as.character(entranceYear)
major = as.character(major)
(courseStructure$學年 == as.character(as.integer(entranceYear)) &
stringr::str_detect(courseStructure$應修系級,paste0(major,1))
) -> pick_courses
(courseStructure$學年 == as.character(as.integer(entranceYear)+1L) &
stringr::str_detect(courseStructure$應修系級, paste0(major,2))
) -> pick_courses2
(courseStructure$學年 == as.character(as.integer(entranceYear)+2L) &
stringr::str_detect(courseStructure$應修系級, paste0(major,3))
) -> pick_courses3
(courseStructure$學年 == as.character(as.integer(entranceYear)+3L) &
stringr::str_detect(courseStructure$應修系級, paste0(major,4))
) -> pick_courses4
year1 = unique(courseStructure$科目名稱[pick_courses])
year2 = unique(courseStructure$科目名稱[pick_courses2])
year3 = unique(courseStructure$科目名稱[pick_courses3])
year4 = unique(courseStructure$科目名稱[pick_courses4])
result = list(year1,year2,year3,year4)
return(result)
}
get_courses(100,"經濟系")
