cong = cat(cong1,"同學錄取國立臺北大學經濟系")
cat(sep="\n")
}
congrats = for (i in (1:3)) {
cong1 = cat("恭喜",ntpu_econtpu_eco[[i]])
cong = cat(cong1,"同學錄取國立臺北大學經濟系")
cat(sep="\n")
}
congrats = as.character(congrats)
# congrats
congrats
congrats
congrats = for (i in (1:3)) {
cong1 = cat("恭喜",ntpu_econtpu_eco[[i]])
cong = cat(cong1,"同學錄取國立臺北大學經濟系")
cat(sep="\n")
}
congrats
# congrats
congrats
cong1 = cat("恭喜",ntpu_econtpu_eco[[i]])
cong = cat(cong1,"同學錄取國立臺北大學經濟系")
cong1 = cat("恭喜",ntpu_econtpu_eco[[i]])
cong = cat(cong1,"同學錄取國立臺北大學經濟系")
cat(sep="\n")
congrats = for (i in (1:3)) {
cong1 = cat("恭喜",ntpu_econtpu_eco[[i]])
cong = cat(cong1,"同學錄取國立臺北大學經濟系")
cat(sep="\n")
}
congrats
# congrats
cong1 = cat("恭喜",ntpu_econtpu_eco[[i]])
cong1 = cat("恭喜",ntpu_econtpu_eco[[i]])
cong1 = cat("恭喜",ntpu_econtpu_eco[[i]])
cong1
cong1 = cat("恭喜",ntpu_econtpu_eco[[i]])
cong1
cong1
cong1 = cat("恭喜",ntpu_econtpu_eco[[i]])
View(students10)
name1
namelist
ntpu_econtpu_eco %in% namelist
ntpu_econtpu_eco[(ntpu_econtpu_eco %in% namelist) == T]
(ntpu_econtpu_eco %in% namelist) == T
ntpu_econtpu_eco[(ntpu_econtpu_eco %in% namelist) == T]
congrats = for (i in (1:3)) {
cong1 = cat("恭喜",ntpu_econtpu_eco[[i]][ntpu_econtpu_eco[(ntpu_econtpu_eco %in% namelist) == T]])
cong = cat(cong1,"同學錄取國立臺北大學經濟系")
cat(sep="\n")
}
ntpu_econtpu_eco[(ntpu_econtpu_eco %in% namelist) == T]
congrats
# congrats
cong1 = cat("恭喜",ntpu_econtpu_eco[[i]][ntpu_econtpu_eco[(ntpu_econtpu_eco %in% namelist) == T])
congrats = for (i in (1:3)) {
cong1 = cat("恭喜",ntpu_econtpu_eco[[i]])
cong = cat(cong1,"同學錄取國立臺北大學經濟系")
cat(sep="\n")
}
ntpu_econtpu_eco[(ntpu_econtpu_eco %in% namelist) == T]
congrats_list = ntpu_econtpu_eco[(ntpu_econtpu_eco %in% namelist) == T]
congrats = c("恭喜",congrats_list)
---
title: "homework 3"
output: html_document
params:
studentName: "馮紀維"
studentID: "410773131"
---
# 注意事項
存檔與填寫注意事項：
假設你叫王小明，學號41078392。
1. 有些同學可能家裡電腦不是utf-8設定，為防萬一，請於存檔時使用：File > save with enconding, 然後選utf-8
2. 本文檔開始的Frontmatter中，studentID（即key）其value目前為"你的學號"，以上面學號為例則必需改成"41078392"；而studentName（key）其value目前為"你的名字"，以上面名字為例則必需改成"王小明"
> 每次作業滿分10分：有寫作業於期限內上傳得3分，剩餘7分依作業準確率決定最後得分多寡，除非該題另有規定。
> 前述存檔與frontmatter要求缺任何一個則扣1分。
請先執以下code chunk, 引入所需packages，答案禁止引用其他套件（Package）。
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
```
# 題目
## 1 新北市違法雇主
以下資料來自[新北市違法雇主資料_勞動基準法](https://data.ntpc.gov.tw/od/detail?oid=A3408B16-7B28-4FA5-9834-D147AAE909BF)，執行後可得到badEmployers物件，其底下元素名稱說明可參考來源連結網頁：
```{r data1}
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
```
### 1.1 違反法條種類
針對law元素，列出裡面出現過的條款（不重覆陳列）存在violatedArticles (class character)：
```{r ans11}
violatedArticles = as.character(levels(factor(badEmployers[[4]])))
class(violatedArticles)
violatedArticles
```
### 1.2 各項法條違反者數目
使用table()函數呈現出每個條款的違法廠商數目，存在table_countsByArticle (class table), 正確答案在執行names(table_countsByArticle)時會出現前一題的所有條款。
```{r ans12}
table_countsByArticle = table( badEmployers [[4]] )
names(table_countsByArticle)
class(table_countsByArticle)
table_countsByArticle
```
### 1.3 違反數最多的法條
自1.2題的table_countsByAricle找出最多廠商違反的條款名稱及數目，即透過「要/不要」向量選出違反數最高的項目；結果存在mostViolatedArticle（class table）。正確答案下，names(mostViolatedArticle)會呈現該條款，而as.integer(mostViolatedArticle)會呈現違法廠商數目。
提示：table class物件為integer type，可對它取max()得到最大值。
```{r ans13}
pick_max_article = table_countsByArticle[ (table_countsByArticle == max(table_countsByArticle))==T ]
pick_max_article
mostViolatedArticle = pick_max_article
mostViolatedArticle = as.table(mostViolatedArticle)
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
class(mostViolatedArticle)
mostViolatedArticle
```
### 1.4 最常違反法條之內容
找出最常違反條款的法條內容（可參見lawContent這個元素），並將此內容存在mostViolatedArticle_content (class character, length=1)
```{r ans14}
table_countsBylawcontent = table( badEmployers[[5]] )
pick_max_content = table_countsByArticle [ (table_countsBylawcontent == max(table_countsBylawcontent))==T ]
pick_max_content
mostViolatedArticle_content = pick_max_content
mostViolatedArticle_content = as.character(names(mostViolatedArticle_content))
class(mostViolatedArticle_content)
length(mostViolatedArticle_content)
mostViolatedArticle_content
```
### 1.5 處份日期最常落在幾月
找出處份日期最常出現的月份並存在popularSentenceMonth（class character, length=1）：
```{r ans15}
count_month = list(`1` = min(table(stringr::str_detect(badEmployers[["dt"]],"/01/"))),
`2`= min(table(stringr::str_detect(badEmployers[["dt"]],"/02/"))),
`3`= min(table(stringr::str_detect(badEmployers[["dt"]],"/03/"))),
`4`= min(table(stringr::str_detect(badEmployers[["dt"]],"/04/"))),
`5`= min(table(stringr::str_detect(badEmployers[["dt"]],"/05/"))),
`6`= min(table(stringr::str_detect(badEmployers[["dt"]],"/06/"))),
`7` = min(table(stringr::str_detect(badEmployers[["dt"]],"/07/"))),
`8`= min(table(stringr::str_detect(badEmployers[["dt"]],"/08/"))),
`9`= min(table(stringr::str_detect(badEmployers[["dt"]],"/09/"))),
`10`= min(table(stringr::str_detect(badEmployers[["dt"]],"/10/"))),
`11`= min(table(stringr::str_detect(badEmployers[["dt"]],"/11/"))),
`12`= min(table(stringr::str_detect(badEmployers[["dt"]],"/12/"))))
max(as.integer(count_month ))
names(count_month[count_month == max(as.integer(count_month ))])
popularSentenceMonth = names(count_month[count_month == max(as.integer(count_month ))])
class(popularSentenceMonth)
length(popularSentenceMonth)
popularSentenceMonth
```
## 2 個人申請
以下資料為某年度學測五科分數對照表(table)、北大經濟虛擬榜單(namelist)以及喵喵高中3年1班10位同學的個人申請資料(students10)：
```{r data2}
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
```
### 2.1 ordered factor
請將國文的級分對照表按照分數區間轉化為factor後存到名為chinese的答案物件(class為Ord.factor)，為了方便計算，請讓每一個分數區間的儲存方式=級分+1:
提示:
"76.59 - 100.00"為16
"71.12 -  76.58"為15
.
.
.
以此類推。
小知識:
factor是從1開始的整數，沒有0喔。
```{r ans21}
chinese = ordered(table[[2]])
chinese
```
### 2.2 str_detect()
請取出10位學生中志願為北大的學生名字並存到名為ntpu_namelist的答案物件(class為chr):
```{r ans22}
ntpu_namelist= (students10[[1]][stringr::str_detect(students10[["志願"]],"北大") == T])
ntpu_namelist
```
### 2.3 vector計算&logical應用練習
以下為北大經濟該年度一階篩選條件:
篩選一: 國文 >= 12
篩選二: 英文+數學 >= 26
請問取出能進入北大經濟二階面試的學生名單，並存到名為ntpu_eco的答案物件(class為chr):
提示：
志願沒有填北大經濟的人可以進一階篩選嗎?
logical儲存的本質是甚麼?
```{r ans23}
`經濟志願`=(students10[[1]][stringr::str_detect(students10[["志願"]],"北大經濟") == T])
`經濟志願` = as.list(`經濟志願`)
verfied = students10[["姓名"]] %in%`經濟志願`
scam1 = students10[["國文"]][verfied == T]>=12
scam2 = ( students10[["英文"]] [verfied == T] + students10[["數學"]] [verfied == T] ) >=26
ntpu_econtpu_eco = `經濟志願`[scam1 == T][scam2 == T]
ntpu_econtpu_eco = as.character(ntpu_econtpu_eco)
ntpu_econtpu_eco
```
### 2.4 %in%
終於放榜了!
請幫3年1班志願填北大經濟的同學看看他們有沒有上榜，並幫上榜同學列印榜單，以下為榜單模板:
恭喜 XXX 同學錄取國立臺北大學經濟系
請將榜單文字儲存到名為congrats的答案物件(class為chr)。
```{r ans24}
congrats_list = ntpu_econtpu_eco[(ntpu_econtpu_eco %in% namelist) == T]
congrats = c("恭喜",congrats_list)
congrats
# congrats
```
congrats = c("恭喜",congrats_list)
congrats
congrats = "恭喜" + congrats_list
class(congrats_list)
congrats= paste0("恭喜" , congrats_list)
congrats
congrats = paste0(congrats,"同學錄取國立臺北大學經濟系" )
congrats
`經濟志願`=(students10[[1]][stringr::str_detect(students10[["志願"]],"北大經濟") == T])
`經濟志願` = as.list(`經濟志願`)
verfied = students10[["姓名"]] %in%`經濟志願`
scam1 = students10[["國文"]][verfied == T]>=12
scam2 = ( students10[["英文"]] [verfied == T] + students10[["數學"]] [verfied == T] ) >=26
ntpu_econtpu_eco = `經濟志願`[scam1 == T][scam2 == T]
ntpu_econtpu_eco = as.character(ntpu_econtpu_eco[is.null(ntpu_econtpu_eco)==F])
ntpu_econtpu_eco
`經濟志願`=(students10[[1]][stringr::str_detect(students10[["志願"]],"北大經濟") == T])
`經濟志願` = as.list(`經濟志願`)
verfied = students10[["姓名"]] %in%`經濟志願`
scam1 = students10[["國文"]][verfied == T]>=12
scam2 = ( students10[["英文"]] [verfied == T] + students10[["數學"]] [verfied == T] ) >=26
ntpu_econtpu_eco = `經濟志願`[scam2 == T][scam1 == T]
ntpu_econtpu_eco = as.character(ntpu_econtpu_eco[is.null(ntpu_econtpu_eco)==F])
ntpu_econtpu_eco
ntpu_econtpu_eco = as.character(ntpu_econtpu_eco[is.null(ntpu_econtpu_eco)==F])
ntpu_econtpu_eco
`經濟志願`=(students10[[1]][stringr::str_detect(students10[["志願"]],"北大經濟") == T])
`經濟志願` = as.list(`經濟志願`)
verfied = students10[["姓名"]] %in%`經濟志願`
scam1 = students10[["國文"]][verfied == T]>=12
scam2 = ( students10[["英文"]] [verfied == T] + students10[["數學"]] [verfied == T] ) >=26
ntpu_econtpu_eco = `經濟志願`[scam2 == T][scam1 == T]
ntpu_econtpu_eco
is.null(ntpu_econtpu_eco)
ntpu_econtpu_eco = as.character(ntpu_econtpu_eco)
ntpu_econtpu_eco
str(ntpu_econtpu_eco)
ntpu_econtpu_eco[[1]]
is.null(ntpu_econtpu_eco)
ntpu_econtpu_eco = as.character(ntpu_econtpu_eco)
is.null(ntpu_econtpu_eco)
ntpu_econtpu_eco[is.null(ntpu_econtpu_eco)==F]
ntpu_econtpu_eco = `經濟志願`[scam1 == T][scam2 == T]
ntpu_econtpu_eco = as.character(ntpu_econtpu_eco)
is.null(ntpu_econtpu_eco)==F
is.null(ntpu_econtpu_eco)
ntpu_econtpu_eco
ntpu_econtpu_eco %in% NULL
ntpu_econtpu_eco %in% NULL == F
ntpu_econtpu_eco = ntpu_econtpu_eco [ntpu_econtpu_eco %in% NULL == F]
ntpu_econtpu_eco
ntpu_econtpu_eco = `經濟志願`[scam2 == T][scam1 == T]
ntpu_econtpu_eco = as.character(ntpu_econtpu_eco)
ntpu_econtpu_eco = ntpu_econtpu_eco [ntpu_econtpu_eco %in% NULL == F]
ntpu_econtpu_eco
`經濟志願`=(students10[[1]][stringr::str_detect(students10[["志願"]],"北大經濟") == T])
`經濟志願` = as.list(`經濟志願`)
verfied = students10[["姓名"]] %in%`經濟志願`
scam1 = students10[["國文"]][verfied == T]>=12
scam2 = ( students10[["英文"]] [verfied == T] + students10[["數學"]] [verfied == T] ) >=26
ntpu_econtpu_eco = `經濟志願`[scam2 == T][scam1 == T]
ntpu_econtpu_eco = as.character(ntpu_econtpu_eco)
ntpu_econtpu_eco = ntpu_econtpu_eco [ntpu_econtpu_eco %in% NULL == F]
ntpu_econtpu_eco
ntpu_econtpu_eco [ntpu_econtpu_eco %in% NULL == F]
ntpu_econtpu_eco = as.character(ntpu_econtpu_eco)
ntpu_econtpu_eco = ntpu_econtpu_eco [ntpu_econtpu_eco %in% NULL == F]
ntpu_econtpu_eco
ntpu_econtpu_eco = ntpu_econtpu_eco [ntpu_econtpu_eco %in% "NULL" == F]
ntpu_econtpu_eco
`經濟志願`=(students10[[1]][stringr::str_detect(students10[["志願"]],"北大經濟") == T])
`經濟志願` = as.list(`經濟志願`)
verfied = students10[["姓名"]] %in%`經濟志願`
scam1 = students10[["國文"]][verfied == T]>=12
scam2 = ( students10[["英文"]] [verfied == T] + students10[["數學"]] [verfied == T] ) >=26
ntpu_econtpu_eco = `經濟志願`[scam1 == T][scam2 == T]
ntpu_econtpu_eco = as.character(ntpu_econtpu_eco)
ntpu_econtpu_eco = ntpu_econtpu_eco [ntpu_econtpu_eco %in% "NULL" == F]
ntpu_econtpu_eco
congrats
congrats_list = ntpu_econtpu_eco[(ntpu_econtpu_eco %in% namelist) == T]
congrats = paste0( "恭喜" , congrats_list )
congrats = paste0( congrats,"同學錄取國立臺北大學經濟系" )
congrats
congrats = paste0( "恭喜 " , congrats_list )
congrats = paste0( congrats," 同學錄取國立臺北大學經濟系" )
congrats
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
str_extract(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳vector
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|段兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
pattern <- paste0("段(兄|兄弟)",back_regex)
back_regex = str_extract_all(twoNames, "弟")
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex = !str_extract_all(twoNames, "弟")
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex = str_extract_all(twoNames, "(?!弟)")
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
back_regex = str_extract_all(twoNames, "(?!弟)")
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex = str_extract_all(twoNames, "(?=弟)")
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex = str_extract_all(twoNames, "(?<=弟)")
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex = str_extract_all(twoNames, "(?<!弟)")
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex = str_extract_all(twoNames, "(?<!後面鄰居不能有弟)")
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
library(stringr)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|弟)")
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
str_extract(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳vector
str_view_all(heartSutra,"色") # 檢視
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
str_view_all(heartSutra,"色") # 檢視
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
back_regex = str_extract_all(twoNames, "(?!弟)")
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex = "段(?!弟)"
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
str_extract_all(twoNames, "段(兄|兄弟)")
str_extract_all(twoNames, "段(兄弟)")
back_regex = str_extract_all(twoNames, "段兄(?!弟)")
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex = str_view_all(twoNames, "段兄(?!弟)")
back_regex
back_regex = str_view_all(twoNames, "段兄弟")
back_regex
str_view_all(twoNames, "段(兄|兄弟)")
str_view_all(twoNames, "段兄"|"段兄弟")
str_view_all(twoNames, "段(兄|兄弟)")
str_extract_all(twoNames, "段(兄|兄弟)")
str_extract_all(twoNames, "段(兄|兄弟)")
back_regex = "(?!弟)"
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex = "(?!弟)"
back_regex
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄弟|兄弟弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
back_regex = "(?!弟)"
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
str_extract_all(twoNames, "(段兄弟|段兄)")
str_extract_all(twoNames, "段(兄|兄弟)(?!弟)")
str_extract_all(twoNames, "(段兄|段兄弟)")
str_extract_all(twoNames, "(段兄|段兄弟)")
str_extract_all(twoNames, "(段兄|段兄弟)")
str_extract_all(twoNames, "(段兄|段兄弟)")
str_extract_all(twoNames, "(段兄|段兄弟)")
str_extract_all(twoNames, "段(兄|兄弟)")
str_extract_all(twoNames, "(段兄|段兄弟)")
str_extract_all(twoNames, "段兄|段兄弟")
str_extract_all(twoNames, "段兄|段兄弟")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
back_regex = "(?!弟)"
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
str_extract_all(twoNames, "段(兄弟|兄)")
str_extract_all(twoNames, "段(兄弟|兄)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄弟|兄)")
str_extract_all(twoNames, "段(兄弟|兄)")
str_extract_all(twoNames, "段(兄弟|兄)")
str_extract_all(twoNames, "段(兄弟|兄)")
back_regex = "(?!弟)"
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄弟，但也有有人叫他段兄，最常...."
str_extract_all(twoNames, "段(兄弟|兄)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄弟|兄)")
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
back_regex = "(?!弟)"
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
back_regex = "(?!弟)"
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
str_extract_all(twoNames, "段(兄|兄弟)")
str_extract_all(twoNames, "段(兄|兄弟)(?!弟))
str_extract_all(twoNames, "段(兄|兄弟)(?!弟))
str_extract_all(twoNames, "段(兄|兄弟)(?!弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
back_regex = "(?!弟)"
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
View(semiGodsSemiDevils)
View(semiGodsSemiDevils[[5]][[1]])
semiGodsSemiDevils("P2")
semiGodsSemiDevils["P2"]
semiGodsSemiDevils["data"]["P2"]
str(semiGodsSemiDevils)
semiGodsSemiDevils["data"]
semiGodsSemiDevils["data"]
str(semiGodsSemiDevils)
semiGodsSemiDevils["data"]["text"]["section"=="P2"]
semiGodsSemiDevils["data"]
str(semiGodsSemiDevils)
semiGodsSemiDevils["data"]["text"][("section"=="P2")]
semiGodsSemiDevils["data"]["text"]
semiGodsSemiDevils["data"][["text"]][("section"=="P2")]
semiGodsSemiDevils["data"][["text"]][("section"=="P2")]
semiGodsSemiDevils["data"][["text"]][("section"=="P2")=T]
semiGodsSemiDevils["data"][["text"]][("section"=="P2")==T]
str(semiGodsSemiDevils)
semiGodsSemiDevils["data"]
context_picked =semiGodsSemiDevils["data"]
context_picked
View(context_picked)
as.list(context_picked)
context_picked = as.list(context_picked)
View(context_picked)
context_picked =semiGodsSemiDevils["data"]
context_picked = as.list(context_picked)
context_picked
# 啟動一個乾淨空的R環境
source("https://www.dropbox.com/s/xtge2ghfb7dhple/108-2-hw1-4.R?dl=1")
# 除了Global environment會清空，之前引入的套件也會被移除
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
semiGodsSemiDevils["data"]
context_picked =semiGodsSemiDevils["data"]
context_picked = as.list(context_picked)
context_picked = context_picked[]
context_picked
View(context_picked)
